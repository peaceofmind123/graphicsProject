//
// Created by Satan on 2/13/2018.
//

#include "globals.hpp"

using namespace GraphicsProject;
using namespace std;
Model* Components::loadModel(const string& path )
{
    ifstream file;
    stringstream fileBuffer;
    Model*model=new Model();



    file.open(path.c_str());
    if(!file)
    {
        throw FileNotFoundException();
    }
    fileBuffer<<file.rdbuf();
    file.close();
    string line;
    vector<string> lines;
    vector<vector<string> > tokens;
    while(std::getline(fileBuffer,line))
    {

        size_t firstCharPos;
        size_t lastSpacePos;


        size_t foundVertex = line.find("v");

        size_t foundSurface = line.find("f");
        bool isFoundVertex = (foundVertex==0);
        bool isFoundSurface = (foundSurface==0);
        bool isFound = isFoundVertex || isFoundSurface;
        if(isFound)
        {
            do
            {
                firstCharPos = line.find_first_not_of(" ");


                line = line.substr(firstCharPos);
                lastSpacePos = line.find_last_of(" ");
                if(lastSpacePos==line.length()-1)
                    line=line.substr(0,lastSpacePos);
                else
                    lastSpacePos=string::npos;

            } while(!(firstCharPos==0 && lastSpacePos==string::npos));
            lines.push_back(line);
        }


    }

    for(unsigned i=0;i<lines.size();i++)
    {
        line=lines.at(i);
        vector<string> ts; //ts shorthand for tokens, tokens used elsewhere
        int spacePos = line.find(' ');
        string token;
        while(spacePos!=string::npos)
        {
            token = line.substr(0,spacePos);
            ts.push_back(token);
            line=line.substr(spacePos+1);
            spacePos=line.find(' ');
        }
        ts.push_back(line);
        tokens.push_back(ts);

    }
    for(unsigned i=0;i<tokens.size();i++)
    {
        vector<string> ts = tokens.at(i);
        for(int j=0;j<ts.size();j++)
        {
            string token = ts[j];
            int firstCharPos = token.find_first_not_of(" ");
            if(!(firstCharPos==string::npos))
                token=token.substr(firstCharPos);
            ts[j]=token;
        }
            if(ts.at(0)=="v")
            {

                Vertex* v = Components::parseVertex(ts);
                //todo define parseVertex


                model->vertices.push_back(*v);
            }

            else if (ts.at(0)=="f")
            {

                Surface *s = Components::parseSurface(ts,model);
                model->surfaces.push_back(*s);

            }
            else
            {
                continue;
                //we do not evaluate vertexnormals or textures
                //this is outside the scope of this project
                //the face normals are evaluated geometrically from
                //the vertex positions.
            }

    }
    return model;
}

Vertex* Components::parseVertex(const vector<string>& tokens)
{
    Vertex* v = new Vertex();

    if(tokens.size()==4)
    {
        //xyz coordinates available
        try
        {
            v->x = std::stod(tokens.at(1).c_str());
            v->y = std::stod(tokens.at(2).c_str());
            v->z = std::stod(tokens.at(3).c_str());

        }
        catch (exception& e) //this exception can be raised if the string to double conversion cannot occur
        {
            cout<<tokens.at(1)<<tokens.at(2)<<tokens.at(3)<<endl;
            throw BadFileException();
        }

    }
    else if(tokens.size()==3)
    {
        //only x and y coordinates available
        try
        {
            v->x = std::stod(tokens.at(1));
            v->y= std::stod(tokens.at(2));
            v->z = 0; //default value

        }
        catch (exception& e)
        {

            throw BadFileException();

        }
    }
    else if(tokens.size()>4)
    {
        string validTokens[4];
        int count=0;
        for(int i = 0;i<tokens.size();i++)
        {
            string token = tokens[i];
            if(!token.empty())
            {
                validTokens[count++]=token;

            }
            if(count<3)
                throw BadFileException();
            if(count==3)
            {
                v->x = std::stod(tokens.at(1));
                v->y= std::stod(tokens.at(2));
                v->z = 0; //default value
            }
            else if(count==4)
            {
                
            }
            
        }

        throw BadFileException();
    }
    return v;
}



Surface* Components::parseSurface(const vector<string>& tokens,Model* model)
{
    Surface* s=new Surface();
    for(int i=1;i<tokens.size();i++) //note: i starts from 1 cuz the first token is f
    {

        string token = tokens.at(i);


        int slashPos = token.find('/');
        if(!(slashPos==string::npos))
        {
            //here we discard the vt and vn part of the face info
            token=token.substr(0,slashPos);
        }
        else
        {
            while(token.at(token.length()-1)==' ') //removing trailing spaces, if any
                token=token.substr(0,token.length()-1);
        }
        int k;
        try
        {
            k=std::stoi(token);
        }
        catch(exception& e) //raised when face info contains invalid characters
        {
            throw BadFileException();
        }
        try
        {
            //association between a model's vertices and its vertexnormals (one-to-one) by pointers
                Vertex* v = &(model->vertices[k-1]);
            //adding the reference of the vertex to the surface, this way, edges can be easily resolved
                s->vertices.push_back(v);


        }
        catch (exception& e) //this error is caused when the vertex referenced by the face doesn't exist in the file
        {
            throw BadFileException();
        }

    }
    return s;
}
